generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Sport {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  athletes   Athlete[]
  activities Activity[]
  templates  Template[]
}

model Athlete {
  id          String        @id @default(uuid())
  userId      String        @unique @default(cuid())
  gender      String
  sport       Sport         @relation(fields: [sportId], references: [id])
  sportId     Int
  activity    Activity[]
  template    Template[]
  competition Competition[]
  goal        Goal[]
  meta        Meta[]
  metaId      String? 
}

model Meta {
  id        String      @id @default(uuid())
  athleteId String
  heartrate Int
  watt      Int
  speed     Int
  date DateTime @default(now())
  athlete   Athlete  @relation(fields: [athleteId], references: [id], onDelete: Cascade)
}

model Activity {
  id            String         @id @default(uuid())
  athleteId     String
  athlete       Athlete        @relation(fields: [athleteId], references: [id])
  date          DateTime       @default(now())
  name          String
  tags          ActivityTags[]
  questions     Question[]
  sport         Sport          @relation(fields: [sportId], references: [id])
  sportId       Int
  intervals     Interval[]
  goalId        String?
  goal          Goal?          @relation(fields: [goalId], references: [id])
  competitionId String?
  competition   Competition?   @relation(fields: [competitionId], references: [id])
  templateId    String?
  template      Template?      @relation(fields: [templateId], references: [id])
}

model ActivityTags {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  activities Activity[]
  templates  Template[]
}

model Question {
  id         String     @id @default(uuid())
  question   String
  type       String
  activities Activity[]
  templates  Template[]
}

model Interval {
  id         String    @id @default(uuid())
  duration   Int
  intensity  Int
  activityId String?
  activity   Activity? @relation(fields: [activityId], references: [id])
  templateId String?
  template   Template? @relation(fields: [templateId], references: [id])
}

model Competition {
  id              String     @id @default(uuid())
  date            DateTime   @default(now())
  location        String
  competitionGoal String
  priority        String
  comment         String
  athleteId       String
  athlete         Athlete    @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  activities      Activity[]
}

model Goal {
  id         String     @id @default(uuid())
  date       DateTime
  goalTarget Int
  comment    String
  athleteId  String
  athlete    Athlete    @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  activities Activity[]
}

model Template {
  id          String               @id @default(uuid())
  athleteId   String
  athlete     Athlete              @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  name        String
  tags        ActivityTags[]
  questions   Question[]
  sport       Sport                @relation(fields: [sportId], references: [id])
  sportId     Int
  parameterId Int
  parameter   MeasurementParameter @relation(fields: [parameterId], references: [id])
  intervals   Interval[]
  activities  Activity[]
}

model MeasurementParameter {
  id        Int        @id @default(autoincrement())
  name      String
  templates Template[]
}
